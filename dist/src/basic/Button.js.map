{"version":3,"sources":["../../../src/basic/Button.js"],"names":["Button","borderedBtn","borderWidth","props","bordered","undefined","borderRadius","rounded","borderRadiusLarge","defaultProps","style","getInitialStyle","_active","active","_androidRippleColor","androidRippleColor","_badge","badge","_block","block","_bordered","_danger","danger","_dark","dark","_disabled","disabled","_full","full","_iconLeft","iconLeft","_iconRight","iconRight","_info","info","_inputButton","inputButton","_large","large","_light","light","_primary","primary","_rounded","_small","small","_success","success","_transparent","transparent","_vertical","vertical","_warning","warning","passThruProps","variables","context","theme","children","OS","Children","map","child","type","cloneElement","uppercase","androidRipple","Version","prepareRootProps","_root","c","activeOpacity","onPress","Ripple","contextTypes","object","propTypes","oneOfType","number","array","bool","StyledButton"],"mappings":"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","file":"Button.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { TouchableOpacity, Platform, View, TouchableNativeFeedback } from \"react-native\";\nimport { connectStyle } from \"native-base-shoutem-theme\";\nimport _ from 'lodash';\nimport variable from \"./../theme/variables/platform\";\nimport { Text } from \"./Text\";\nimport { computeProps } from \"../Utils/computeProps\";\n\nimport mapPropsToStyleNames from \"../Utils/mapPropsToStyleNames\";\n\nclass Button extends Component {\n\n\tstatic contextTypes = {\n\t\ttheme: PropTypes.object,\n\t};\n\n\tgetInitialStyle() {\n\t\treturn {\n\t\t\tborderedBtn: {\n\t\t\t\tborderWidth: this.props.bordered ? 1 : undefined,\n\t\t\t\tborderRadius: this.props.rounded && this.props.bordered ? variable.borderRadiusLarge : 2,\n\t\t\t},\n\t\t};\n\t}\n\n\t_root: React.ReactElement<TouchableOpacity | TouchableNativeFeedback>;\n\n\tprepareRootProps() {\n\t\tconst defaultProps = {\n\t\t\tstyle: this.getInitialStyle().borderedBtn,\n\t\t};\n\n\t\tconst {\n\t\t\tactive: _active,\n\t\t\tandroidRippleColor: _androidRippleColor,\n\t\t\tbadge: _badge,\n\t\t\tblock: _block,\n\t\t\tbordered: _bordered,\n\t\t\tdanger: _danger,\n\t\t\tdark: _dark,\n\t\t\tdisabled: _disabled,\n\t\t\tfull: _full,\n\t\t\ticonLeft: _iconLeft,\n\t\t\ticonRight: _iconRight,\n\t\t\tinfo: _info,\n\t\t\tinputButton: _inputButton,\n\t\t\tlarge: _large,\n\t\t\tlight: _light,\n\t\t\tprimary: _primary,\n\t\t\trounded: _rounded,\n\t\t\tsmall: _small,\n\t\t\tsuccess: _success,\n\t\t\ttransparent: _transparent,\n\t\t\tvertical: _vertical,\n\t\t\twarning: _warning,\n      ...passThruProps\n\t\t} = computeProps(this.props, defaultProps);\n\n\t\treturn passThruProps;\n\t}\n\trender() {\n\t\tconst variables = this.context.theme\n\t\t\t? this.context.theme[\"@@shoutem.theme/themeStyle\"].variables\n\t\t\t: variable;\n\t\tconst children =\n\t\t\tPlatform.OS === \"ios\"\n\t\t\t\t? this.props.children\n\t\t\t\t: React.Children.map(\n\t\t\t\t\t\tthis.props.children,\n\t\t\t\t\t\tchild =>\n\t\t\t\t\t\t\t(child && child.type === Text\n\t\t\t\t\t\t\t\t? React.cloneElement(child, { uppercase: true, ...child.props })\n\t\t\t\t\t\t\t\t: child)\n\t\t\t\t\t);\n\t\tif (Platform.OS !== \"android\" || variables.androidRipple === false || Platform.Version <= 21) {\n\t\t\treturn (\n\t\t\t\t<TouchableOpacity\n\t\t\t\t\t{...this.prepareRootProps()}\n\t\t\t\t\tref={c => (this._root = c)}\n\t\t\t\t\tactiveOpacity={this.props.activeOpacity > 0 ? this.props.activeOpacity : 0.5}\n\t\t\t\t>\n\t\t\t\t\t{children}\n\t\t\t\t</TouchableOpacity>\n\t\t\t);\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<TouchableNativeFeedback\n\t\t\t\t\tref={c => (this._root = c)}\n\t\t\t\t\tonPress={this.props.onPress}\n\t\t\t\t\tbackground={\n\t\t\t\t\t\tthis.props.androidRippleColor\n\t\t\t\t\t\t\t? TouchableNativeFeedback.Ripple(this.props.androidRippleColor)\n\t\t\t\t\t\t\t: TouchableNativeFeedback.Ripple(variables.androidRippleColor)\n\t\t\t\t\t}\n\t\t\t\t\t{...this.prepareRootProps()}\n\t\t\t\t>\n\t\t\t\t\t<View {...this.prepareRootProps()}>\n\t\t\t\t\t\t{children}\n\t\t\t\t\t</View>\n\t\t\t\t</TouchableNativeFeedback>\n\t\t\t);\n\t\t}\n\t}\n}\n\nButton.propTypes = {\n\t...TouchableOpacity.propTypes,\n\tstyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number, PropTypes.array]),\n\tblock: PropTypes.bool,\n\tprimary: PropTypes.bool,\n\ttransparent: PropTypes.bool,\n\tsuccess: PropTypes.bool,\n\tdanger: PropTypes.bool,\n\twarning: PropTypes.bool,\n\tinfo: PropTypes.bool,\n\tbordered: PropTypes.bool,\n\tdisabled: PropTypes.bool,\n\trounded: PropTypes.bool,\n\tlarge: PropTypes.bool,\n\tsmall: PropTypes.bool,\n\tactive: PropTypes.bool,\n};\n\nconst StyledButton = connectStyle(\"NativeBase.Button\", {}, mapPropsToStyleNames)(Button);\nexport { StyledButton as Button };\n"]}