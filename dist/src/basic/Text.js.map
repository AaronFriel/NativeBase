{"version":3,"sources":["../../../src/basic/Text.js"],"names":["Text","props","uppercase","children","passThruProps","text","Children","map","child","isString","toUpper","_root","c","propTypes","bool","style","oneOfType","object","number","array","defaultProps","StyledText"],"mappings":"m1BAAA,4B;AACA,qC;AACA;AACA,8B;;AAEA;AACA,mE;;AAEMA,I;AACI;;;;;AAKF,KAAKC,KALH,CAEJC,SAFI,QAEJA,SAFI,CAGJC,QAHI,QAGJA,QAHI,CAIDC,aAJC;;AAON,GAAIC,YAAJ;AACA,GAAIH,SAAJ,CAAe;AACbG,KAAO,gBAAMC,QAAN,CAAeC,GAAf,CAAmBJ,QAAnB,CAA6B,SAACK,KAAD,CAAW;AAC7C,GAAI,iBAAEC,QAAF,CAAWD,KAAX,CAAJ,CAAuB;AACrB,MAAO,kBAAEE,OAAF,CAAUF,KAAV,CAAP;AACD,CAFD,IAEO;AACL,MAAOA,MAAP;AACD;AACF,CANM,CAAP;AAOD,CARD,IAQO;AACLH,KAAOF,QAAP;AACD;;AAEH;AACC,0DAAQ,IAAK,sBAAM,QAAKQ,KAAL,CAAaC,CAAnB,EAAb,EAAwCR,aAAxC;AACEC,IADF,CADD;;;AAKA,C;;;AAGFL,KAAKa,SAAL;AACI,kBAAOA,SADX;AAECX,UAAW,oBAAUY,IAFtB;AAGCC,MAAO,oBAAUC,SAAV,CAAoB,CAAC,oBAAUC,MAAX,CAAmB,oBAAUC,MAA7B,CAAqC,oBAAUC,KAA/C,CAApB,CAHR;;;AAMAnB,KAAKoB,YAAL,CAAoB;AACnBlB,UAAW,KADQ,CAApB;;;AAIA,GAAMmB,YAAa,yCAAa,iBAAb,CAAgC,EAAhC,iCAA0DrB,IAA1D,CAAnB,C;;AAEuBA,I,CAAdqB,U","file":"Text.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Text as RNText } from \"react-native\";\nimport _ from \"lodash\";\n\nimport { connectStyle } from \"native-base-shoutem-theme\";\nimport mapPropsToStyleNames from \"../Utils/mapPropsToStyleNames\";\n\nclass Text extends Component {\n\trender() {\n    const {\n      uppercase,\n      children,\n      ...passThruProps,\n    } = this.props;\n\n    let text;\n    if (uppercase) {\n      text = React.Children.map(children, (child) => {\n        if (_.isString(child)) {\n          return _.toUpper(child);\n        } else {\n          return child;\n        }\n      });\n    } else {\n      text = children;\n    }\n\n\t\treturn (\n\t\t\t<RNText ref={c => (this._root = c)} {...passThruProps}>\n\t\t\t\t{text}\n\t\t\t</RNText>\n\t\t);\n\t}\n}\n\nText.propTypes = {\n\t...RNText.propTypes,\n\tuppercase: PropTypes.bool,\n\tstyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number, PropTypes.array]),\n};\n\nText.defaultProps = {\n\tuppercase: false,\n};\n\nconst StyledText = connectStyle(\"NativeBase.Text\", {}, mapPropsToStyleNames)(Text);\n\nexport { StyledText as Text };\n"]}