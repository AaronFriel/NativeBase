{"version":3,"sources":["../../../src/Utils/computeProps.js"],"names":["computeProps","incomingProps","defaultProps","computedProps","clone","children","incomingPropsStyle","style","assign","computedPropsStyle","Array","isArray","forEach","merge","getByID"],"mappings":"AAAA,a;;;;;AAKgBA,Y,CAAAA,Y,CAJhB,8B,6CACA,sG,kKAGO,QAASA,aAAT,CAAsBC,aAAtB,CAAqCC,YAArC,CAAmD;;AAExD,GAAIC,eAAgB,EAApB;;;AAGAF,cAAgB,iBAAEG,KAAF,CAAQH,aAAR,CAAhB;;AAEA,MAAOA,eAAcI,QAArB;;AAEA,GAAMC,oBAAqBL,cAAcM,KAAzC;;AAEA,MAAON,eAAcM,KAArB;;;AAGA,GAAIN,aAAJ,CAAmB;AACjB,iBAAEO,MAAF,CAASL,aAAT,CAAwBD,YAAxB,CAAsCD,aAAtC;AACD,CAFD,IAEO;AACLE,cAAgBD,YAAhB;AACD;;AAED,GAAII,kBAAJ,CAAwB;AACtB,GAAIG,oBAAqB,EAAzB;AACAN,cAAcI,KAAd,CAAsB,EAAtB;AACA,GAAIG,MAAMC,OAAN,CAAcL,kBAAd,CAAJ,CAAuC;AACrC,iBAAEM,OAAF,CAAUN,kBAAV,CAA8B,SAACC,KAAD,CAAW;AACvC,GAAI,MAAOA,MAAP,GAAiB,QAArB,CAA+B;AAC7B,iBAAEM,KAAF,CAAQJ,kBAAR,CAA4B,kCAAwBK,OAAxB,CAAgCP,KAAhC,CAA5B;AACD,CAFD,IAEO;AACL,iBAAEM,KAAF,CAAQJ,kBAAR,CAA4BF,KAA5B;AACD;AACF,CAND;AAOD,CARD,IAQO,IAAI,MAAOD,mBAAP,GAA8B,QAAlC,CAA4C;AACjDG,mBAAqB,kCAAwBK,OAAxB,CAAgCR,kBAAhC,CAArB;AACD,CAFM,IAEA;AACLG,mBAAqBH,kBAArB;AACD;;AAED,iBAAEO,KAAF,CAAQV,cAAcI,KAAtB,CAA6BL,aAAaK,KAA1C,CAAiDE,kBAAjD;AACD;;AAED,MAAON,cAAP;AACD","file":"computeProps.js","sourcesContent":["\"use_strict\";\nimport _ from \"lodash\";\nimport ReactNativePropRegistry from \"react-native/Libraries/Renderer/shims/ReactNativePropRegistry\";\n// For compatibility with RN 0.25\n// import ReactNativePropRegistry from \"react-native/Libraries/ReactNative/ReactNativePropRegistry\";\nexport function computeProps(incomingProps, defaultProps) {\n  // External props has a higher precedence\n  let computedProps = {};\n\n  // eslint-disable-next-line\n  incomingProps = _.clone(incomingProps);\n  // eslint-disable-next-line\n  delete incomingProps.children;\n\n  const incomingPropsStyle = incomingProps.style;\n  // eslint-disable-next-line\n  delete incomingProps.style;\n\n  // console.log(defaultProps, incomingProps);\n  if (incomingProps) {\n    _.assign(computedProps, defaultProps, incomingProps);\n  } else {\n    computedProps = defaultProps;\n  }\n  // Pass the merged Style Object instead\n  if (incomingPropsStyle) {\n    let computedPropsStyle = {};\n    computedProps.style = {};\n    if (Array.isArray(incomingPropsStyle)) {\n      _.forEach(incomingPropsStyle, (style) => {\n        if (typeof style === \"number\") {\n          _.merge(computedPropsStyle, ReactNativePropRegistry.getByID(style));\n        } else {\n          _.merge(computedPropsStyle, style);\n        }\n      });\n    } else if (typeof incomingPropsStyle === \"number\") {\n      computedPropsStyle = ReactNativePropRegistry.getByID(incomingPropsStyle);\n    } else {\n      computedPropsStyle = incomingPropsStyle;\n    }\n\n    _.merge(computedProps.style, defaultProps.style, computedPropsStyle);\n  }\n  // console.log(\"computedProps \", computedProps);\n  return computedProps;\n}\n"]}